//
//  TemplateCallbackViewController.swift
//  RxSwiftStudyInUIkit
//
//  Created by won soohyeon on 2023/03/18.
//

import UIKit

final class TemplateCallbackViewController: UIViewController {
    
    private let textView = UITextView().then {
        $0.isEditable = false
        $0.font = .systemFont(ofSize: 24)
    }
    
    override func viewDidLoad() {
        view.backgroundColor = .white
        
        view.addSubview(textView)
        
        textView.snp.makeConstraints{
            $0.edges.equalToSuperview().inset(24)
        }
        
        textView.text = """
        [템플릿 콜백 패턴]
        Gof가 정의한 디자인패턴에 속하지는 않는다.
        콜백으로 상속 대신 위임을 사용하는 템플릿 패턴
        상속 대신 익명 내부 클래스 또는 람다 표현식을 활용할 수 있다.
        
        템플릿 콜백 패턴은 알고리즘의 구조 자체를 사용자 정의해야 하는 경우에 유용합니다.
        """
        
        client()
    }
    
    private func client() {
        let algorithmA = TemplateCallbackSkeletonA()
        algorithmA.execute {
            print("Completion callback for algorithmA")
        }

        let algorithmB = TemplateCallbackSkeletonB()
        algorithmB.execute {
            print("Completion callback for algorithmB")
        }
        
        TextFileProcessor().processFile(at: "processFile/path")
        ImageFileProcessor().processFile(at: "processFile/path")
        
        // 아래는 클로져를 사용한 예제코드
        let generator = DocumentGeneratorClosure()

        // generate document with default formatter
        let defaultFormatter: () -> String = {
            return "This document was generated by \(UIDevice.current.name)"
        }
        let defaultDocument = generator.generateDocument(
            title: "Sample Document",
            body: "This is a sample document.",
            formatter: defaultFormatter
        )
        print(defaultDocument)

        // generate document with custom formatter
        let customFormatter: () -> String = {
            return "This document was generated by the custom formatter."
        }
        let customDocument = generator.generateDocument(
            title: "Sample Document",
            body: "This is a sample document.",
            formatter: customFormatter
        )
        print(customDocument)
    }
}

class DocumentGeneratorClosure {
    func generateDocument(title: String, body: String, formatter: () -> String) -> String {
        var document = "Title: \(title)\n\n"
        document += "Body:\n\(body)\n\n"
        document += formatter() // calling the provided closure
        return document
    }
}
